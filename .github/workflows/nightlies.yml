name: Nightlies
on:
  push:
    branches:
      - master
      - actions
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: '0 0 * * *'

jobs:
  setup:
    name: 'build settings'
    runs-on: ubuntu-latest
    outputs:
      settings: ${{ steps.settings.outputs.settings }}
      deploy: ${{ steps.settings.outputs.deploy }}

    env:
      # Bump this value when a rebuild of nightlies (of the
      # same compiler commits) has to be done.
      nightlies_revision: 3

    steps:
      - name: Checkout nightlies
        uses: actions/checkout@v2
        with:
          path: nightlies

      - name: Generate version matrix
        shell: bash
        run: |
          # Tracked branches
          branches=( 'devel' 'version-1-4' 'version-1-2' 'version-1-0' )

          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          {
            for branch in "${branches[@]}"; do
              jq --null-input \
                 --arg branch "$branch" \
                 --arg commit "$(getHash nim-lang/Nim "$branch")" \
                 '{ branch: $branch, commit: $commit }'
            done
          } | jq -s '.' | tee versions.json

      - name: Restore build settings
        uses: actions/cache@v2
        with:
          path: settings
          key: build-settings-${{ hashFiles('versions.json') }}-${{ env.nightlies_revision }}
          restore-keys: build-settings-

      - name: Generate build settings
        id: settings
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          deploy=false
          case '${{ github.event_name }}' in
            schedule)
              deploy=true
              ;;
            push)
              message=$(
                cd nightlies
                git show -s --format=%s '${{ github.ref }}'
              )

              if [[ $message == *'[deploy]'* ]]; then
                deploy=true
              else
                deploy=false
              fi
          esac

          declare -A refs

          while IFS='=' read -r branch commit; do
            refs[$branch]=$commit
          done <<< "$(jq -r '.[] | .branch + "=" + .commit' versions.json)"

          mkdir -p settings
          # Delete older branch settings (if they were restored)
          find settings -mindepth 1 -maxdepth 1 $(printf "! -name %q.json " "${!refs[@]}")

          declare -A environment=(
            [SOURCE_CODE_EPOCH]=$(date -u +%s)
          )

          for branch in "${!refs[@]}"; do
            savedCommit=
            savedNightliesRev=
            savedBuildRevision=
            commit=${refs[$branch]}
            buildRevision=0
            if [[ -e "settings/$branch.json" ]]; then
              savedSettings=$(< "settings/$branch.json")
              savedCommit=$(jq -r '.commit' <<< "$savedSettings")
              savedNightliesRev=$(jq '.nightlies_revision // 0' <<< "$savedSettings")
              savedBuildRevision=$(jq '.build_revision // -1' <<< "$savedSettings")
              if [[ $savedNightliesRev -ne $nightlies_revision ]]; then
                buildRevision=$(($savedBuildRevision + 1))
              fi
            fi
            if [[ $savedCommit != "$commit" || $savedNightliesRev -ne $nightlies_revision ]]; then
              echo "::group::Generating build settings for branch $branch"
              {
                {
                  for var in "${!environment[@]}"; do
                    jq --null-input \
                       --arg variable "$var" \
                       --arg value "${environment[$var]}" \
                       '{ ($variable): $value }'
                  done
                } | jq -s '{ environment: (reduce .[] as $item (null; . + $item)) }'

                tag=$(date -u --date="@${environment[SOURCE_CODE_EPOCH]}" +%F)-$branch-$commit
                # Don't add revision to tags for now.
                # if [[ $buildRevision -gt 0 ]]; then
                #   tag=$tag-$buildRevision
                # fi

                jq --null-input --arg tag "$tag" '{ release: $tag }'
                jq --null-input --argjson nightlies_revision "$nightlies_revision" '{ nightlies_revision: $nightlies_revision }'
                jq --null-input --argjson build_revision "$buildRevision" '{ build_revision: $build_revision }'

              } | jq -s --arg commit "$commit" 'reduce .[] as $item ({ commit: $commit }; . + $item)' > "settings/$branch.json"
            else
              echo "::group::Stored settings for branch $branch @ $commit found."
            fi
            jq --arg branch "$branch" '.[] | select(.branch == $branch)' versions.json | jq -s 'add' - "settings/$branch.json" | tee -a settings.json
            echo "::endgroup::"
          done

          echo "::set-output name=settings::$(jq -sc '.' settings.json)"
          echo "::set-output name=deploy::$deploy"

  sourceArchive:
    needs: setup

    strategy:
      fail-fast: false
      matrix:
        setting: ${{ fromJson(needs.setup.outputs.settings) }}
    name: 'source (${{ matrix.setting.branch }}, ${{ matrix.setting.commit }})'
    runs-on: ubuntu-latest
    env: ${{ matrix.setting.environment }}
    steps:
      - name: Checkout nightlies
        uses: actions/checkout@v2
        with:
          path: nightlies

      - name: Restore Nim from cache
        id: nim-cache
        uses: actions/cache@v2
        with:
          path: nim/output/nim-*.tar.xz
          key: 'source-${{ matrix.setting.commit }}-${{ matrix.setting.build_revision }}'

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          ref: ${{ matrix.setting.commit }}
          path: nim

      - name: Get csources version
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-version
        shell: bash
        run: |
          csources_repo=nim-lang/csources
          csources_commit=$(git ls-remote "https://github.com/$csources_repo" master)

          if [[ -f nim/config/build_config.txt ]]; then
            . nim/config/build_config.txt

            csources_repo=${nim_csourcesUrl#https://github.com/}
            csources_repo=${csources_repo%.git}
            csources_commit=$nim_csourcesHash
          fi

          echo "::set-output name=repo::$csources_repo"
          echo "::set-output name=commit::$csources_commit"

      - name: Restore csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: >
            csources-${{ runner.os }}-${{ steps.csources-version.outputs.repo }}-${{ steps.csources-version.outputs.commit }}

      - name: Checkout csources
        if: >
          steps.nim-cache.outputs.cache-hit != 'true' &&
          steps.csources-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.csources-version.outputs.repo }}
          ref: ${{ steps.csources-version.outputs.commit }}
          path: csources

      - name: Setup environment
        shell: bash
        run: echo '${{ github.workspace }}/nim/bin' >> "$GITHUB_PATH"

      - name: Build 1-stage csources compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ! -e csources/bin/nim ]]; then
            make -C csources -j $(nproc) CC=gcc
          else
            echo 'Using prebuilt csources'
          fi
          cp csources/bin/nim nim/bin

      - name: Build compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          nim c koch
          ./koch boot -d:release

      - name: Generate csources
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          ./koch csources -d:danger '-d:gitHash:${{ matrix.setting.commit }}'

      - name: Bundle external sources
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim

          version=$(nim secret --hints:off <<< 'echo NimVersion; quit 0')
          major=${version%%.*}
          minor=${version#*.}
          minor=${minor%.*}
          patch=${version##*.}

          ./koch nimble
          # Only Nim >= 1.4.0 bundles fusion.
          if [[ $major -ge 1 && $minor -ge 4 ]]; then
            ./koch fusion
          fi

      - name: Build source archive
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          ./koch xz

          mkdir -p output
          source=$(basename build/nim-*.tar.xz)
          version=${source%.tar.xz}
          version=${version#nim-}
          cp build/$source output/nim-$version.tar.xz

      - name: Publish release
        if: needs.setup.outputs.deploy == 'true'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! hub -C nightlies release show '${{ matrix.setting.release }}' >/dev/null 2>&1; then
            cat << EOF | hub -C nightlies release create -a nim/output/* -F - '${{ matrix.setting.release }}' >/dev/null
          Nightly build on $(date -u --date="@$SOURCE_CODE_EPOCH" "+%F") for branch ${{ matrix.setting.branch }}

          Commit: https://github.com/nim-lang/Nim/commit/${{ matrix.setting.commit }}

          Generated release binaries will be uploaded as they're made available.
          EOF
          else
            echo "Release '${{ matrix.setting.release }}' has already been created, skipping."
          fi

      - name: Upload source archive to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'nim-${{ matrix.setting.commit }}'
          path: nim/output/*

  build:
    needs: [ setup, sourceArchive ]

    strategy:
      fail-fast: false
      matrix:
        setting: ${{ fromJson(needs.setup.outputs.settings) }}
        target:
          - os: linux
            triple: x86_64-linux-musl
          - os: linux
            triple: i686-linux-musl
          - os: linux
            triple: aarch64-linux-musl
          - os: linux
            triple: armv7l-linux-musleabihf
          - os: macosx
            triple: x86_64-apple-darwin14
          - os: windows
            triple: x86_64-w64-mingw32
          - os: windows
            triple: i686-w64-mingw32
        include:
          - target:
              os: linux
            builder: ubuntu-18.04
          - target:
              os: macosx
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019

    env: ${{ matrix.setting.environment }}
    name: '${{ matrix.target.triple }} (${{ matrix.setting.branch }}, ${{ matrix.setting.commit }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout build scripts
        uses: actions/checkout@v2
        with:
          path: nightlies

      - name: Cache build outputs
        id: built
        uses: actions/cache@v2
        with:
          path: output
          key: >
            output-${{ hashFiles('nightlies/lib.sh') }}-${{ hashFiles('nightlies/build-release.sh') }}-${{ matrix.target.triple }}-${{ matrix.setting.commit }}-${{ matrix.setting.build_revision }}

      - name: Cache dependencies
        if: steps.built.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: external
          key: >
            deps-${{ hashFiles('nightlies/lib.sh') }}-${{ hashFiles('nightlies/deps.sh') }}-${{ hashFiles('nightlies/buildreq.txt') }}-${{ runner.os }}-${{ matrix.target.triple }}-${{ matrix.setting.build_revision }}

      - name: Install dependencies
        if: steps.built.outputs.cache-hit != 'true'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: nightlies/deps.sh -t '${{ matrix.target.triple }}'

      - name: Download generated source package
        if: steps.built.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: 'nim-${{ matrix.setting.commit }}'
          path: source

      - name: Extract source package
        if: steps.built.outputs.cache-hit != 'true'
        id: source
        shell: bash
        run: |
          source=( source/nim-*.tar.xz )
          version=${source[0]##*nim-}
          version=${version%%.tar.xz}
          case '${{ runner.os }}' in
            'Windows')
              7z x -so "${source[0]}" | 7z x -si -ttar -aoa
              ;;
            *)
              tar xJf "${source[0]}"
              ;;
          esac

          echo "::set-output name=version::$version"

      - name: Setup environment
        if: steps.built.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "-d:gitHash:\"${{ matrix.setting.commit }}\"" >> external/nim.cfg

      - name: Build release binaries
        if: steps.built.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ '${{ runner.os }}' == Linux ]]; then
            # Build nightlies without Internet to ensure that generated source
            # can be built without Internet.
            sudo unshare sudo -u "$USER" nightlies/build-release.sh 'nim-${{ steps.source.outputs.version }}'
          else
            nightlies/build-release.sh 'nim-${{ steps.source.outputs.version }}'
          fi

      - name: Prepare binaries for uploads
        id: release
        shell: bash
        run: |
          source nightlies/lib.sh

          artifact=$(< output/nim.txt)
          echo "::set-output name=artifact::$artifact"
          # Github Actions work based on native Windows path, so we're doing
          # some quick conversions here.
          echo "::set-output name=artifact_nativepath::$(nativepath "$artifact")"

      - name: Upload release binaries
        if: needs.setup.outputs.deploy == 'true'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd nightlies
          if ! hub release show -f '%as' '${{ matrix.setting.release }}' | grep "$(basename '${{ steps.release.outputs.artifact }}')" >/dev/null 2>&1; then
            hub release edit -m '' -a '${{ steps.release.outputs.artifact }}' '${{ matrix.setting.release }}'
          else
            echo "Binary already released for tag '${{ matrix.setting.release }}', not overwritting."
          fi

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'binaries-${{ matrix.setting.branch }}-${{ matrix.setting.commit }}'
          path: '${{ steps.release.outputs.artifact_nativepath }}'

  latestTag:
    needs: [ setup, build ]

    strategy:
      fail-fast: false
      matrix:
        setting: ${{ fromJson(needs.setup.outputs.settings) }}

    if: needs.setup.outputs.deploy == 'true'
    name: 'Update latest tags for ${{ matrix.setting.release }}'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout nightlies
        uses: actions/checkout@v2
        with:
          path: nightlies

      - name: Download generated source package
        uses: actions/download-artifact@v2
        with:
          name: 'nim-${{ matrix.setting.commit }}'
          path: source

      - name: Download built binaries from artifacts
        uses: actions/download-artifact@v2
        with:
          name: 'binaries-${{ matrix.setting.branch }}-${{ matrix.setting.commit }}'
          path: binaries

      - name: 'Push latest-${{ matrix.setting.branch }} tag'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag='latest-${{ matrix.setting.branch }}'
          aliasFor='${{ matrix.setting.release }}'
          echo "Deleting release $tag"
          hub -C nightlies release delete "$tag" || :
          git -C nightlies push --delete origin "$tag" || :

          echo "Create $tag as draft"
          cat << EOF | hub -C nightlies release create -d -F - "$tag" >/dev/null
          Latest successful build for branch ${{ matrix.setting.branch }}

          This release is an alias for the latest successful nightly build \
          for branch \`${{ matrix.setting.branch }}\`: https://github.com/${{ github.repository }}/releases/tag/${{ matrix.setting.release }}

          Each \`latest-\` alias is guaranteed to contain binaries for all \
          supported architectures.
          EOF

          source=(source/*)
          mv -v "${source[0]}" "source/source.tar.xz"
          echo "Uploading ${source[0]} as source.tar.xz"
          hub -C nightlies release edit -m '' -a "source/source.tar.xz" "$tag"

          for artifact in binaries/*; do
            # Trim version from artifact name
            shortName=${artifact#*nim-*-}
            mv -v "$artifact" "binaries/$shortName"
            echo "Uploading $artifact as $shortName"
            hub -C nightlies release edit -m '' -a "binaries/$shortName" "$tag"
          done

          echo "Publishing $tag"
          hub -C nightlies release edit -m '' --draft=false "$tag"
